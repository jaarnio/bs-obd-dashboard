"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllPIDs = exports.getPIDInfo = exports.parseOBDResponse = void 0;
var obdInfo_1 = require("./obdInfo");
var obdInfo_2 = require("./obdInfo");
function parseOBDResponse(hexString) {
    var reply = {}, byteNumber, valueArray; //New object
    if (hexString === 'NO DATA' ||
        hexString === 'OK' ||
        hexString === '?' ||
        hexString === 'UNABLE TO CONNECT' ||
        hexString === 'SEARCHING...') {
        //No data or OK is the response, return directly.
        reply.value = hexString;
        return reply;
    }
    hexString = hexString.replace(/ /g, ''); //Whitespace trimming //Probably not needed anymore?
    valueArray = [];
    for (byteNumber = 0; byteNumber < hexString.length; byteNumber += 2) {
        valueArray.push(hexString.substr(byteNumber, 2));
    }
    if (valueArray[0] === '41') {
        reply.mode = valueArray[0];
        reply.pid = valueArray[1];
        for (var i = 0; i < obdInfo_2.default.length; i++) {
            if (obdInfo_2.default[i].pid === reply.pid) {
                var numberOfBytes = obdInfo_2.default[i].bytes;
                reply.name = obdInfo_2.default[i].name;
                reply.unit = obdInfo_2.default[i].unit;
                var convertToUseful = obdInfo_2.default[i].convertToUseful;
                if (!convertToUseful) {
                    break;
                }
                switch (numberOfBytes) {
                    case 1:
                        reply.value = convertToUseful(valueArray[2]);
                        break;
                    case 2:
                        reply.value = convertToUseful(valueArray[2], valueArray[3]);
                        break;
                    case 4:
                        reply.value = convertToUseful(valueArray[2], valueArray[3], valueArray[4], valueArray[5]);
                        break;
                    case 8:
                        reply.value = convertToUseful(valueArray[2], valueArray[3], valueArray[4], valueArray[5], valueArray[6], valueArray[7], valueArray[8], valueArray[9]);
                        break;
                }
                break; //Value is converted, break out the for loop.
            }
        }
    }
    else if (valueArray[0] === '43') {
        reply.mode = valueArray[0];
        for (var i = 0; i < obdInfo_2.default.length; i++) {
            if (obdInfo_2.default[i].mode === '03') {
                var convertToUseful = obdInfo_2.default[i].convertToUseful;
                if (!convertToUseful) {
                    break;
                }
                reply.name = obdInfo_2.default[i].name;
                reply.unit = obdInfo_2.default[i].unit;
                reply.value = convertToUseful(valueArray[1], valueArray[2], valueArray[3], valueArray[4], valueArray[5], valueArray[6]);
            }
        }
    }
    return reply;
}
exports.parseOBDResponse = parseOBDResponse;
function getPIDInfo(pid) {
    var responsePid = obdInfo_1.default.find(function (item) { return item.pid === pid; });
    return responsePid || null;
}
exports.getPIDInfo = getPIDInfo;
function getAllPIDs() {
    return obdInfo_1.default;
}
exports.getAllPIDs = getAllPIDs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXFDO0FBQ3JDLHFDQUE2QjtBQUk3QixTQUFnQixnQkFBZ0IsQ0FBQyxTQUFpQjtJQUNoRCxJQUFJLEtBQUssR0FBdUIsRUFBRSxFQUNoQyxVQUFVLEVBQ1YsVUFBVSxDQUFDLENBQUMsWUFBWTtJQUUxQixJQUNFLFNBQVMsS0FBSyxTQUFTO1FBQ3ZCLFNBQVMsS0FBSyxJQUFJO1FBQ2xCLFNBQVMsS0FBSyxHQUFHO1FBQ2pCLFNBQVMsS0FBSyxtQkFBbUI7UUFDakMsU0FBUyxLQUFLLGNBQWMsRUFDNUI7UUFDQSxpREFBaUQ7UUFDakQsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDeEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLG9EQUFvRDtJQUM3RixVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRWhCLEtBQUssVUFBVSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFVLElBQUksQ0FBQyxFQUFFO1FBQ25FLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsRDtJQUVELElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUMxQixLQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQVUsQ0FBQztRQUNwQyxLQUFLLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFF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