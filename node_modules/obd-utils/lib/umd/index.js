(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./obdInfo", "./obdInfo"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAllPIDs = exports.getPIDInfo = exports.parseOBDResponse = void 0;
    var obdInfo_1 = require("./obdInfo");
    var obdInfo_2 = require("./obdInfo");
    function parseOBDResponse(hexString) {
        var reply = {}, byteNumber, valueArray; //New object
        if (hexString === 'NO DATA' ||
            hexString === 'OK' ||
            hexString === '?' ||
            hexString === 'UNABLE TO CONNECT' ||
            hexString === 'SEARCHING...') {
            //No data or OK is the response, return directly.
            reply.value = hexString;
            return reply;
        }
        hexString = hexString.replace(/ /g, ''); //Whitespace trimming //Probably not needed anymore?
        valueArray = [];
        for (byteNumber = 0; byteNumber < hexString.length; byteNumber += 2) {
            valueArray.push(hexString.substr(byteNumber, 2));
        }
        if (valueArray[0] === '41') {
            reply.mode = valueArray[0];
            reply.pid = valueArray[1];
            for (var i = 0; i < obdInfo_2.default.length; i++) {
                if (obdInfo_2.default[i].pid === reply.pid) {
                    var numberOfBytes = obdInfo_2.default[i].bytes;
                    reply.name = obdInfo_2.default[i].name;
                    reply.unit = obdInfo_2.default[i].unit;
                    var convertToUseful = obdInfo_2.default[i].convertToUseful;
                    if (!convertToUseful) {
                        break;
                    }
                    switch (numberOfBytes) {
                        case 1:
                            reply.value = convertToUseful(valueArray[2]);
                            break;
                        case 2:
                            reply.value = convertToUseful(valueArray[2], valueArray[3]);
                            break;
                        case 4:
                            reply.value = convertToUseful(valueArray[2], valueArray[3], valueArray[4], valueArray[5]);
                            break;
                        case 8:
                            reply.value = convertToUseful(valueArray[2], valueArray[3], valueArray[4], valueArray[5], valueArray[6], valueArray[7], valueArray[8], valueArray[9]);
                            break;
                    }
                    break; //Value is converted, break out the for loop.
                }
            }
        }
        else if (valueArray[0] === '43') {
            reply.mode = valueArray[0];
            for (var i = 0; i < obdInfo_2.default.length; i++) {
                if (obdInfo_2.default[i].mode === '03') {
                    var convertToUseful = obdInfo_2.default[i].convertToUseful;
                    if (!convertToUseful) {
                        break;
                    }
                    reply.name = obdInfo_2.default[i].name;
                    reply.unit = obdInfo_2.default[i].unit;
                    reply.value = convertToUseful(valueArray[1], valueArray[2], valueArray[3], valueArray[4], valueArray[5], valueArray[6]);
                }
            }
        }
        return reply;
    }
    exports.parseOBDResponse = parseOBDResponse;
    function getPIDInfo(pid) {
        var responsePid = obdInfo_1.default.find(function (item) { return item.pid === pid; });
        return responsePid || null;
    }
    exports.getPIDInfo = getPIDInfo;
    function getAllPIDs() {
        return obdInfo_1.default;
    }
    exports.getAllPIDs = getAllPIDs;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQUEscUNBQXFDO0lBQ3JDLHFDQUE2QjtJQUk3QixTQUFnQixnQkFBZ0IsQ0FBQyxTQUFpQjtRQUNoRCxJQUFJLEtBQUssR0FBdUIsRUFBRSxFQUNoQyxVQUFVLEVBQ1YsVUFBVSxDQUFDLENBQUMsWUFBWTtRQUUxQixJQUNFLFNBQVMsS0FBSyxTQUFTO1lBQ3ZCLFNBQVMsS0FBSyxJQUFJO1lBQ2xCLFNBQVMsS0FBSyxHQUFHO1lBQ2pCLFNBQVMsS0FBSyxtQkFBbUI7WUFDakMsU0FBUyxLQUFLLGNBQWMsRUFDNUI7WUFDQSxpREFBaUQ7WUFDakQsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7WUFDeEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLG9EQUFvRDtRQUM3RixVQUFVLEdBQUcsRUFBRSxDQUFDO1FBRWhCLEtBQUssVUFBVSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFVLElBQUksQ0FBQyxFQUFFO1lBQ25FLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQixLQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQVUsQ0FBQztZQUNwQyxLQUFLLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQUksQ0FBQyxNQUFNLEVBQUUs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